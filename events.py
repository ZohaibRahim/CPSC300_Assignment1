# events.py

# Import Patient for type hinting and access to patient attributes
from patient import Patient

class Event:
    """
    Base class for all simulation events.
    """
    def __init__(self, time: int, patient: Patient, event_type: str):
        self.time = time
        self.patient = patient
        self.event_type = event_type

    def __repr__(self):
        return f"<{self.event_type} @ Time {self.time} | P: {self.patient.id} | Pri: {self.patient.priority or 'N/A'}>"

    # CRITICAL: Comparison method for Role B's Priority Queue/Event List
    # Order: 1. Time (asc) -> 2. Priority (asc) -> 3. Patient ID (asc)
    def __lt__(self, other):
        # 1. Primary Sort: Time (Earlier time first)
        if self.time != other.time:
            return self.time < other.time
        
        # Determine priority for sorting (0 is used as a placeholder for unassigned/highest pri)
        p1 = self.patient.priority if self.patient.priority is not None else 0 
        p2 = other.patient.priority if other.patient.priority is not None else 0
        
        # 2. Secondary Sort: Priority (Lower priority number first, e.g., 1 < 2)
        if p1 != p2:
            return p1 < p2
        
        # 3. Tertiary Sort: Patient ID (Lowest patient number first)
        return self.patient.id < other.patient.id

# Events generated by Role A
class Arrival(Event):
    def __init__(self, time, patient):
        super().__init__(time, patient, "Arrival")

class AssessmentDone(Event):
    # This event is scheduled 4 units after assessment starts
    def __init__(self, time, patient):
        super().__init__(time, patient, "AssessmentDone")

class EnterWaitingRoom(Event):
    # This event hands off the patient to Role B's Waiting Room PQ
    def __init__(self, time, patient):
        super().__init__(time, patient, "EnterWaitingRoom")

# Placeholder stubs for other events (to complete the system)
class StartTreatment(Event): pass
class TreatmentCompleted(Event): pass
class Departure(Event): pass
class AdmittingToHospital(Event): pass